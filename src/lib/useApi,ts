import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { apiRequest } from '../lib/apiRequest'

export const useGet = <T,>(key: string, endpoint: string, params?: any) => {
  return useQuery({
    queryKey: [key, params],
    queryFn: () => apiRequest<T>({ endpoint, method: 'get', params }),
  })
}

export const usePost = <T, D extends Record<string, unknown>>(
  key: string,
  endpoint: string,
) => {
  const queryClient = useQueryClient()

  return useMutation<T, unknown, D>({
    mutationFn: (data: D) => apiRequest<T>({ endpoint, method: 'post', data }),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: [key] }),
  })
}

export const usePatch = <T, D extends Record<string, unknown>>(
  key: string,
  endpoint: string,
) => {
  const queryClient = useQueryClient()

  return useMutation<T, unknown, D>({
    mutationFn: (data: D) => apiRequest<T>({ endpoint, method: 'patch', data }),
    onSuccess: () => queryClient.invalidateQueries({ queryKey: [key] }),
  })
}
